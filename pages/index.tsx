import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import data from "../utils/questions.json";
import { useState } from "react";
import { axiosInstance as axios } from "../config/axios.config";

interface QuestionValues {
    [key: string]: number;
    "Strongly Disagree": number;
    Disagree: number;
    Neutral: number;
    Agree: number;
    "Strongly Agree": number;
}

interface ResultExplanations {
    [key: number]: string;
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
}

const Home: NextPage = () => {
    const [hasResult, setHasResult] = useState(false);
    const [loading, setLoading] = useState(false);
    const [values, setValues] = useState(Array(50).fill(0.0));
    const [cluster, setCluster] = useState(-1);

    const questionValues: QuestionValues = {
        "Strongly Disagree": -2.0,
        Disagree: -1.0,
        Neutral: 0.0,
        Agree: 1.0,
        "Strongly Agree": 2.0,
    };

    const resultExplanation: ResultExplanations = {
        0: "They lean more positively towards Extroversion. Responses in this cluster tend to be relatively negative when it comes to Agreeableness and Openness but also is the most negative when it comes to conscientiousness and emotional stability.",
        1: "They are most positively aligned towards Extroversion and relatively positive towards Conscientiousness. Responses in this cluster also has the most negative alignment towards emotional stability while being relatively negative in Agreeableness and Openness.",
        2: "They lean relatively positive towards extroversion and emotional tability. Cluster 2 is also the only cluster with responses aligning more positively towards Agreeableness. The responses in this cluster has a relatively negative alignmment towards openness and conscientiousness",
        3: "They lean most positively toward emotional stability while generally having the most negative alignment towards Agreeableness and Extroversion. Responses in the cluster also has a relatively negative alignment towards Conscientiousness and Openness.",
        4: "They generally align well towards emotional stability. Responses in this cluster also has the highest alignment towards Conscientiousness while having relatively negative responses to Extroversion, Agreeableness, and Openness.",
    };

    const onSubmit = async () => {
        try {
            setLoading(true);
            const data = { data: values };
            let res = await axios.post("/predict", data);
            setCluster(res.data);
            console.log(res);
        } catch (e) {
            console.log(e);
        } finally {
            setLoading(false);
            setHasResult(true);
        }
    };

    const randomizer = () => {
        let newValues = [];
        for (let i = 0; i < 50; i++) newValues.push(Math.floor(Math.random() * 5 - 2));
        setValues(newValues);
    };

    return (
        <div className={styles.container}>
            <Head>
                <title>Personality Cluster</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={styles.main}>
                <h1 className={styles.title}>
                    Personality Cluster <a>Finder</a>
                </h1>

                <div className="mt-8">
                    <button
                        className={`bg-blue-500 uppercase text-white w-full py-2 rounded-md mb-8`}
                        onClick={(e) => randomizer()}
                    >
                        {" "}
                        Randomize
                    </button>
                    {data.map((item, index) => {
                        return (
                            <div key={index}>
                                <p className="block text-2xl">
                                    {index + 1}). {item.question} ({item.name})
                                </p>
                                <div className="flex flex-row my-8 justify-between space-x-4">
                                    {Object.keys(questionValues).map((key, ind) => (
                                        <div key={ind} className="flex flex-col items-center justify-center">
                                            <input
                                                type="radio"
                                                name={item.name}
                                                title={"1.0"}
                                                value={questionValues[key]}
                                                onChange={(e) => {
                                                    let newValues = [...values];
                                                    newValues[index] = parseFloat(e.target.value);
                                                    setValues(newValues);
                                                }}
                                                checked={questionValues[key] === parseFloat(values[index])}
                                            />
                                            <label>{key}</label>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        );
                    })}
                    <button
                        className={`bg-blue-500 uppercase rounded-md text-white w-full py-2 text-xl flex justify-center items-center mb-4  ${
                            loading && "loading"
                        }`}
                        disabled={loading === true}
                        onClick={(e) => onSubmit()}
                    >
                        <svg
                            className={`${loading && "animate-spin"} h-4 w-4 mr-3 fill-white `}
                            viewBox="0 0 24 24"
                        ></svg>
                        {!loading ? "Predict Cluster" : "Loading..."}
                    </button>

                    {hasResult && (
                        <>
                            <span className="font-bold mt-2">Result:</span>
                            <div className="shadow-md rounded-md w-[512px] h-72 mt-4 text-center mx-auto p-2 ">
                                <h3 className="font-bold text-2xl mb-2">You are from Cluster {cluster}</h3>
                                <p className="">{resultExplanation[cluster]}</p>
                            </div>
                        </>
                    )}
                </div>
            </main>

            <footer className={styles.footer}>
                <a
                    href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
                    target="_blank"
                    rel="noopener noreferrer"
                >
                    Powered by{" "}
                    <span className={styles.logo}>
                        <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
                    </span>
                </a>
            </footer>
        </div>
    );
};

export default Home;
